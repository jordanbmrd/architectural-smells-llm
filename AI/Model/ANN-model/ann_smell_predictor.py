# -*- coding: utf-8 -*-
"""ann_smell_predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12auPHlIO-hAkkxao2_XfDmSFb6xpEfuF

# Artificial Neural Network

### Importing the libraries
"""

import numpy as np
import pandas as pd
import tensorflow as tf

tf.__version__

"""## Part 1 - Data Preprocessing

### Importing the dataset
"""

dataset = pd.read_csv('bunkerweb.csv')
X = dataset.iloc[:, 1:-1].values # The columns 0 has not impact the result (version).
y = dataset.iloc[:, -1].values

print(X)

print(y)

"""### Encoding categorical data"""

df = pd.DataFrame(X, columns=['file', 'smell'])

"""One Hot Encoding the following columns : "*filepath*", "*smell_type*", "*smell_id*", "*Severity*"
"""

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder

cat_cols = ['file', 'smell']
ct = ColumnTransformer(
    transformers=[('encoder', OneHotEncoder(handle_unknown='ignore'), cat_cols)],
    remainder='passthrough'  # pour garder 'version_count'
)

X_encoded = ct.fit_transform(df)

print(X_encoded)

"""### Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split

# Get number of rows
n_rows = X_encoded.shape[0]

# Define the split index: 80% for training, 20% for testing
split_index = int(n_rows * 0.8)

# Split chronologically
X_train = X_encoded[:split_index]
X_test = X_encoded[split_index:]
y_train = y[:split_index]
y_test = y[split_index:]

"""### Feature Scaling"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler(with_mean=False)
# In neural network it is really important to apply Feature Scaling on all features
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

print(X_train)

"""## Part 2 - Building the ANN

### Initializing the ANN
"""

ann = tf.keras.models.Sequential()

"""### Adding the input layer and the first hidden layer"""

"""Units => number of neurons in the layer. There is not a rule about this number,
we have to do test to determine which one may be good for our project"""
ann.add(tf.keras.layers.Dense(units=6, activation='relu'))

"""### Adding the second hidden layer"""

ann.add(tf.keras.layers.Dense(units=6, activation='relu'))

"""### Adding the output layer"""

# "Units = 1" because 1 neuron can detect the entire target (0 or 1)
ann.add(tf.keras.layers.Dense(units=1))

"""## Part 3 - Training the ANN

### Compiling the ANN
"""

#ann.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics=['accuracy'])
ann.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])  # ou 'mse'

"""### Training the ANN on the Training set"""

ann.fit(X_train, y_train, batch_size = 32, epochs = 100)

"""## Part 4 - Making the predictions and evaluating the model

### Predicting the Test set results
"""

y_pred = ann.predict(X_test)
#y_pred = (y_pred > 0.5)
#print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)), 1))

"""### Making the Confusion Matrix"""

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# y_pred est un tableau de float, il ne faut pas faire de seuil ici
print("MSE :", mean_squared_error(y_test, y_pred))
print("MAE :", mean_absolute_error(y_test, y_pred))
print("RÂ²  :", r2_score(y_test, y_pred))

"""### Predict the presence of smells on the latest version"""